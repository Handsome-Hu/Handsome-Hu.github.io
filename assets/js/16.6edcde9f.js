(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{498:function(t,_,v){"use strict";v.r(_);var a=v(14),s=Object(a.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"无关性的基石"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#无关性的基石"}},[t._v("#")]),t._v(" 无关性的基石")]),t._v(" "),v("h3",{attrs:{id:"平台无关性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#平台无关性"}},[t._v("#")]),t._v(" 平台无关性")]),t._v(" "),v("p",[t._v("各种不同平台的虚拟机与所有平台都统一使用的程序存储格式-"),v("strong",[t._v("字节码（ByteCode）")]),t._v("，是构成平台无关性的基石。")]),t._v(" "),v("p",[t._v("无论哪种平台的虚拟机都可以载入和执行间一种平台无关的字节码，从而实现“Write Once. Run Anywhere”。")]),t._v(" "),v("h3",{attrs:{id:"语言无关性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#语言无关性"}},[t._v("#")]),t._v(" 语言无关性")]),t._v(" "),v("p",[t._v("或许大部分程序员都还认为Java虚拟机执行Java程序是一件理所当然和天经地义的事情。但在Java发展之初，设计者就曾经考虑过并实现了让其他语言运行在Java虚拟机之上的可能性，也刻意把Java的规范拆分成了Java语言规范及Java 虚拟机规范。")]),t._v(" "),v("p",[t._v("时至今日，商业机构和开源机构已经在Java语言之外发展出一大批在Java虚拟机之上运行的语言，如Clojure、Groovy、JRuby、Jython、 Scala等。")]),t._v(" "),v("p",[v("strong",[t._v("实现语言无关性的基础仍然是虚拟机和字节码存储格式")]),t._v("，Java虚拟机不和包括Java在内的任何语言绑定，它只与“Class文件”这种特定的二进制文件格式所关联，Class文件中包含了Java虚拟机指令集和符号表以及若干其他辅助信息。")]),t._v(" "),v("p",[t._v("Java虚拟机规范要求在Class文件中使用许多强制性的语法和结构化约束，但任一门功能性语言都可以表示为一个能被Java虚拟机所接受的有效的Class文件。虚拟机并不关注Class的来源是何种语言。")]),t._v(" "),v("h2",{attrs:{id:"class类文件结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#class类文件结构"}},[t._v("#")]),t._v(" Class类文件结构")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("Class文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件之中，中间没有添加任何分隔符")])])]),t._v(" "),v("p",[v("em",[t._v("注意：任何一个Class文件都对应着唯一一个类或接口的定义信息，但反过来说，类成接口并不一定都得定义在文件里（譬如类或接口也可以通过类加载器直接生成）")]),t._v("。")]),t._v(" "),v("p",[t._v("根据Java虚拟机规范的规定，Class文件格式采用一种类似；C语言结构体的伪结构来存储数据，这种伪结构只有"),v("strong",[t._v("两种数据类型：无符号数和表")]),t._v("：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("无符号数")]),t._v("属于基本的数据类型，以u1、u2、u4、u8来表示1个字节、2个字节、4个字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成的字符串值")]),t._v(" "),v("li",[v("strong",[t._v("表")]),t._v("是由多个无符号数或者其他表作为数据项构成的符合数据类型，所有表都习惯性地以“_info”结尾。表用于描述有层次关系的复合结构的数据，整个Class文件本质上就是一张表，它由下表所示的数据项构成：")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("类型")]),t._v(" "),v("th",[t._v("名称")]),t._v(" "),v("th",[t._v("数量")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("u4")]),t._v(" "),v("td",[t._v("magic")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("魔数")])]),t._v(" "),v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("minor_version")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("次版本号")])]),t._v(" "),v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("major_version")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("主版本号")])]),t._v(" "),v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("constant_pool_count")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("常量个数")])]),t._v(" "),v("tr",[v("td",[t._v("cp_info")]),t._v(" "),v("td",[t._v("constant_pool")]),t._v(" "),v("td",[t._v("constant_pool_count - 1")]),t._v(" "),v("td",[t._v("具体常量")])]),t._v(" "),v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("access_flags")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("访问标志")])]),t._v(" "),v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("this_class")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("类索引")])]),t._v(" "),v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("super_class")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("父类索引")])]),t._v(" "),v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("interfaces_count")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("接口索引")])]),t._v(" "),v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("interfaces")]),t._v(" "),v("td",[t._v("interfaces_count")]),t._v(" "),v("td",[t._v("具体接口")])]),t._v(" "),v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("fields_count")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("字段个数")])]),t._v(" "),v("tr",[v("td",[t._v("field_info")]),t._v(" "),v("td",[t._v("fields")]),t._v(" "),v("td",[t._v("fields_count")]),t._v(" "),v("td",[t._v("具体字段")])]),t._v(" "),v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("methods_count")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("方法个数")])]),t._v(" "),v("tr",[v("td",[t._v("method_info")]),t._v(" "),v("td",[t._v("methods")]),t._v(" "),v("td",[t._v("methods_count")]),t._v(" "),v("td",[t._v("具体方法")])]),t._v(" "),v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("attributes_count")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("属性个数")])]),t._v(" "),v("tr",[v("td",[t._v("attribute_info")]),t._v(" "),v("td",[t._v("attributes")]),t._v(" "),v("td",[t._v("attributes_count")]),t._v(" "),v("td",[t._v("具体属性")])])])]),t._v(" "),v("p",[t._v("这16种数据项大致可以分为3类：")]),t._v(" "),v("ul",[v("li",[t._v("3个描述文件属性的数据项：魔数和主次版本号；")]),t._v(" "),v("li",[t._v("11个描述类属性的数据项：类、字段、方法等信息；")]),t._v(" "),v("li",[t._v("2个描述代码属性的数据项；")])]),t._v(" "),v("p",[t._v("Class的结构不像XML等描述语言，它没有任何分割符号。所以在上表中的数据项，无论是顺序还是数量，甚至于数据存储的字节序这样的细节，都是被严格限定的，哪个字节代表佧么含义，长度是多少，先后顺序如何，都不允许改变。")]),t._v(" "),v("p",[t._v("接下来我们就逐一来看看这些数据项的含义。学习过程中我们会用到下面三种工具：")]),t._v(" "),v("ul",[v("li",[t._v("javap。jdk自带的class文件反编译工具")]),t._v(" "),v("li",[t._v("Notepad++的HEX-Editor插件，以16进制的方式查看class文件")]),t._v(" "),v("li",[t._v("JBE(Java Bytecode Editor)，一款非常好用的字节码编辑器。或者是IDEA的jclasslib Bytecode viewer插件")])]),t._v(" "),v("h2",{attrs:{id:"魔数与class文件的版本"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#魔数与class文件的版本"}},[t._v("#")]),t._v(" 魔数与Class文件的版本")]),t._v(" "),v("p",[v("strong",[t._v("每一个class文件的头4个字节称为魔数，它唯一的作用是确定这个文件是否为一个能被虚拟机接受的Class文件")]),t._v("。")]),t._v(" "),v("p",[t._v("很多文件存储标准中都使用魔数来进行身份识别。譬如图片格式gif、jpeg等。使用魔数而不是拓展名来进行识别主要是基于安全方面的考虑，因为文件扩展名能够任意修改。")]),t._v(" "),v("p",[t._v("Class文件的魔数值为：OxCAFEBABE，如图：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171046.png",alt:""}})]),t._v(" "),v("p",[t._v("紧接着魔数的4个字节存储的是Class文件的版本号：第5和第6个字节是"),v("strong",[t._v("次版本号")]),t._v("（Minor Version），第7和第8个字节是"),v("strong",[t._v("主版本号")]),t._v("（Major Version)。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171118.png",alt:""}})]),t._v(" "),v("p",[t._v("使用javap解析class文件，也可以得到版本号信息：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171135.png",alt:""}})]),t._v(" "),v("p",[t._v("0000转10进制=0 0034转10进制=52，我们发现javap的解析结果和十六进制文件是对应的。")]),t._v(" "),v("p",[t._v("下表列出了主流JDK版本编译器输出的默认和可支持的Class：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("编译器版本")]),t._v(" "),v("th",[t._v("十六进制主版本号")]),t._v(" "),v("th",[t._v("十进制主版本号")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("JDK 1.1")]),t._v(" "),v("td",[t._v("00 2D")]),t._v(" "),v("td",[t._v("45")])]),t._v(" "),v("tr",[v("td",[t._v("JDK 1.2")]),t._v(" "),v("td",[t._v("00 2E")]),t._v(" "),v("td",[t._v("46")])]),t._v(" "),v("tr",[v("td",[t._v("JDK 1.3")]),t._v(" "),v("td",[t._v("00 2F")]),t._v(" "),v("td",[t._v("47")])]),t._v(" "),v("tr",[v("td",[t._v("JDK 1.4")]),t._v(" "),v("td",[t._v("00 30")]),t._v(" "),v("td",[t._v("48")])]),t._v(" "),v("tr",[v("td",[t._v("JDK 1.5")]),t._v(" "),v("td",[t._v("00 31")]),t._v(" "),v("td",[t._v("49")])]),t._v(" "),v("tr",[v("td",[t._v("JDK 1.6")]),t._v(" "),v("td",[t._v("00 32")]),t._v(" "),v("td",[t._v("50")])]),t._v(" "),v("tr",[v("td",[t._v("JDK 1.7")]),t._v(" "),v("td",[t._v("00 33")]),t._v(" "),v("td",[t._v("51")])]),t._v(" "),v("tr",[v("td",[t._v("JDK 1.8")]),t._v(" "),v("td",[t._v("00 34")]),t._v(" "),v("td",[t._v("52")])])])]),t._v(" "),v("p",[t._v("相关异常为："),v("strong",[t._v("Unsupported major.minor version 51.0，文件的编译版本是JDK1.7，但是JRE版本小于1.7")]),t._v("。")]),t._v(" "),v("h2",{attrs:{id:"常量池constant-pool"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常量池constant-pool"}},[t._v("#")]),t._v(" 常量池constant_pool")]),t._v(" "),v("p",[t._v("紧接着版本号之后的是常量池入口，常量池可以理解为Class文件之中的资源仓库，它是Class文件结构中与其他项目关联最多的数据项，也是占用Class文件空间最大的数据项目之一。")]),t._v(" "),v("h3",{attrs:{id:"常量池的数量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常量池的数量"}},[t._v("#")]),t._v(" 常量池的数量")]),t._v(" "),v("p",[t._v("由于常量池中的常量数量不固定，所以在常量池的入口需要放置一项u2类型的数据，代表容量池容量计数值constant_pool_count。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171152.png",alt:""}})]),t._v(" "),v("p",[t._v("上图中002f转十进制=47。"),v("strong",[t._v("但是对于常量池的数量需要明确一点，常量池的数量是constant_pool_count-1，为什么减1，是因为索引0表示class中的数据项不引用任何常量池中的常量")]),t._v("。所以上图中常量池的数量为47-1=46。")]),t._v(" "),v("h3",{attrs:{id:"常量池的结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常量池的结构"}},[t._v("#")]),t._v(" 常量池的结构")]),t._v(" "),v("p",[v("strong",[t._v("常量池中主要存放两大类常量：字面量（Literal)和符号引用（Symbolic References)")]),t._v("。")]),t._v(" "),v("p",[t._v("字面量比较接近于Java语言层面的常量概念，如文本字符串、声明为final的常量值等。而符号引用則属于编译原理方面的概念，包括了下面三类常量：")]),t._v(" "),v("ul",[v("li",[t._v("类和接口的全限定名")]),t._v(" "),v("li",[t._v("字段的名称和描述符")]),t._v(" "),v("li",[t._v("方法的名称和描述符")])]),t._v(" "),v("p",[t._v("常量池中每一项常量都是一个表cp_info，cp_info开始的第一位是一个u1类型的标志位（tag)，代表当前这个常量属于哪种常量类型。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171211.png",alt:""}})]),t._v(" "),v("p",[t._v("使用javap -v命令解析字节码内容可以查看常量池：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171224.png",alt:""}})]),t._v(" "),v("p",[t._v("cp_info可以细分为多种类型，标志=tag，15、16、18的常量项是用来支持动态语言调用的（jdk1.7时才加入的）详细如下：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171240.png",alt:""}})]),t._v(" "),v("h3",{attrs:{id:"常量类型的结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常量类型的结构"}},[t._v("#")]),t._v(" 常量类型的结构")]),t._v(" "),v("p",[t._v("之所以说常量池是最烦琐的数据，是因为这14种常量类型各自均有自己的结构，下面列举了11种常用的常量类型的结构：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171254.png",alt:""}})]),t._v(" "),v("p",[t._v("看下图class文件的常量池的第一项常量，它的标志位是0x07，十进制为7，查询上表的标志列发现这个常量属于CONSTANT_Class_info类型，此类型的常量代表一个类或者接口的符号引用。0x0002=2 代表指向#2常量项的索引。")]),t._v(" "),v("p",[t._v("蓝色部分为#2常量项，标志位为0x01代表这个常量属于CONSTANT_Utf8_info，是一个字符串。查询它的结构我们发现标志位的后两位是字符串占用的字节数0x0022=34，所以后34位为字符串内容：com/mimaxueyuan/jvm/aentity/Person。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171310.png",alt:""}})]),t._v(" "),v("p",[t._v("由于Class文件中方法、字段等都需要引用CONSTANT_Utf8_info型常量来描述名称，所以CONSTANT_Utf8_info型常量的最大长度也就是Java中方法、字段名的最大长度。而这里的最大长度就是length的最大值，既u2类型能表达的最大值65535。")]),t._v(" "),v("h2",{attrs:{id:"访问标志access-flag"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#访问标志access-flag"}},[t._v("#")]),t._v(" 访问标志access_flag")]),t._v(" "),v("p",[t._v("在常量池结束之后，紧接着的两个字节代表访问标志（access\n_flags)，这个标志用于标识一些类或者接口层次的访问信息。")]),t._v(" "),v("p",[t._v("具体的标志位以及标志的含义如下表：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("标志名称")]),t._v(" "),v("th",[t._v("标志值")]),t._v(" "),v("th",[t._v("含 义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("ACC_PUBLIC")]),t._v(" "),v("td",[t._v("0x0001")]),t._v(" "),v("td",[t._v("是否为public类型")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_FINAL")]),t._v(" "),v("td",[t._v("0x0010")]),t._v(" "),v("td",[t._v("是否被声明为final，只有类可以设置")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_SUPER")]),t._v(" "),v("td",[t._v("0x0020")]),t._v(" "),v("td",[t._v("JDK1.0.2以后这个标志都为真")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_INTERFACE")]),t._v(" "),v("td",[t._v("0x0200")]),t._v(" "),v("td",[t._v("标识这是一个接口")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_ABSTRACT")]),t._v(" "),v("td",[t._v("0x0400")]),t._v(" "),v("td",[t._v("是否为abstract类型，对于接口或抽象类来说，此标志值为真，其他类值为假")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_SYNTHETIC")]),t._v(" "),v("td",[t._v("0x1000")]),t._v(" "),v("td",[t._v("标识这个类并非由用户代码产生")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_ANNOTATION")]),t._v(" "),v("td",[t._v("0x2000")]),t._v(" "),v("td",[t._v("标识这是一个注解")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_ENUM")]),t._v(" "),v("td",[t._v("0x4000")]),t._v(" "),v("td",[t._v("标识这是一个枚举")])])])]),t._v(" "),v("p",[t._v("accessflags中一共有16个标志位可以使用，当前只定义了其中8个，没有使用到的标志位要求一律为0。你可以把accessflags看成一个长度为16的布尔类型数组：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171338.png",alt:""}})]),t._v(" "),v("p",[t._v("举个栗子，我们现在有个枚举的修饰符为：public enum AccessFlagDemo3，使用javap查看字节码信息如下：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171352.png",alt:""}})]),t._v(" "),v("p",[t._v("使用十六进制方式查看class文件，可以发现访问标志位为0x4031，转化为2进制为：0100 0000 0011 0001‬‬，结合上图发现ACC_PUBLIC，ACC_FINAL，ACC_SUPER，ACC_ENUM标志位均为真。为什么没有声明为final却出现了呢？因为枚举类默认都是不可变的。")]),t._v(" "),v("h2",{attrs:{id:"类索引、父类索引与接口索引集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类索引、父类索引与接口索引集合"}},[t._v("#")]),t._v(" 类索引、父类索引与接口索引集合")]),t._v(" "),v("p",[v("strong",[t._v("类索引this_class和父类索引super_class都是一个u2类型的数据。类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类时全限定名")]),t._v("。")]),t._v(" "),v("p",[t._v("由于Java语言不允许多重继承，所以父类索引只有一个，除了java.lang.Object之外，所有的Java类都有父类，因此除了java.lang.Object外，所有Java类的父类索引都不为0。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171406.png",alt:""}})]),t._v(" "),v("p",[t._v("类索引、父类索引按順序排列在访问标志之后，它们各自指向一个类型为CONSTANT_Class_info的类描述符常量，通过CONSTANT_Class_info类型的常量中的索引值可以找到定义在CONSTANT_Utf8_info类型的常量中的全限定名字符串。如图：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171422.png",alt:""}})]),t._v(" "),v("hr"),t._v(" "),v("p",[t._v("接口索引集合（interfaces)是一组u2类型的数据的集合，它按顺序排列在类索引、父类索引之后。对于接口索引集合，入口的第一项u2类型的数据为接口计数器，表示索引表的容量。如果该类没有实现任何接口，则该计数器值为0，后面接口的索引表不再占用任何字节。其结构如下图：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171432.png",alt:""}})]),t._v(" "),v("p",[t._v("interface_count表示当前类所实现的接口的数量或者当前接口所继承的超接口的数量。")]),t._v(" "),v("p",[t._v("interfaces， 他可以看做是一个数组，其中的每个数组项是一个索引， 指向常量池中的一个CONSTANT_Class_info。")]),t._v(" "),v("p",[v("em",[t._v("注意：只有当前类直接实现的接口才会被统计，如果当前类继承了另一个类， 而另一个类又实现了一个接口，那么这个接口不会统计在当前类的。")])]),t._v(" "),v("h2",{attrs:{id:"字段表集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字段表集合"}},[t._v("#")]),t._v(" 字段表集合")]),t._v(" "),v("p",[t._v("在接口索引集合之后是字段表集合。与接口索引集合类似，入口的第一项u2类型的数据为字段计数器(fields_count)，描述的是当前的类中定义的字段的个数。")]),t._v(" "),v("p",[v("strong",[t._v("需要注意的是这里包括静态字段，但不包括局部变量和从父类继承的字段。如果当前class文件是由一个接口生成的，那么这里的fields_count描述的是接口中定义的字段")]),t._v("，我们知道，接口中定义的字段默认都是静态的。此外要说明的是，编译器可能会自动生成字段，也就是说，"),v("strong",[t._v("class文件中的字段的数量可能多于源文件中定义的字段的数量")]),t._v("。举例来说，编译器会为内部类增加一个字段，这个字段是指向外围类的对象的引用。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171458.png",alt:""}})]),t._v(" "),v("p",[t._v("fields， 可以把它看做一个数组，数组中的每一项是一个field_info 。这个数组中一共有fields_count个field_info，每个field_info都是对一个字段的描述。field_info使用伪代码结构表示如下：")]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("field_info {\n\tu2 access_flags; \n\tu2 name_index; \n\tu2 descriptor_index; \n\tu2 attributes_count; \n\tattribute_info attributes[attributes_count];\n}\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br")])]),v("table",[v("thead",[v("tr",[v("th",[t._v("类型")]),t._v(" "),v("th",[t._v("名称")]),t._v(" "),v("th",[t._v("数量")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("access_flags")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("字段修饰符")])]),t._v(" "),v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("name_index")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("字段和方法简单名称在常量池中的引用")])]),t._v(" "),v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("descriptor_index")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("字段和方法描述符在常量池中的引用")])]),t._v(" "),v("tr",[v("td",[t._v("u2")]),t._v(" "),v("td",[t._v("attributes_count")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("描述字段额外信息属性的个数")])]),t._v(" "),v("tr",[v("td",[t._v("attribute_info")]),t._v(" "),v("td",[t._v("attributes")]),t._v(" "),v("td",[t._v("attributes_count")]),t._v(" "),v("td",[t._v("具体描述字段的额外信息属性")])])])]),t._v(" "),v("h3",{attrs:{id:"字段修饰符access-flags"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字段修饰符access-flags"}},[t._v("#")]),t._v(" 字段修饰符access_flags")]),t._v(" "),v("p",[t._v("字段修饰符与类中的访问标志非常类似，用来描述字段的一些属性：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("标志名称")]),t._v(" "),v("th",[t._v("标志值")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("ACC_PUBLIC")]),t._v(" "),v("td",[t._v("0x0001")]),t._v(" "),v("td",[t._v("是否为public类型")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_PRIVATE")]),t._v(" "),v("td",[t._v("0x0002")]),t._v(" "),v("td",[t._v("是否为private类型")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_PROTECTED")]),t._v(" "),v("td",[t._v("0x0004")]),t._v(" "),v("td",[t._v("是否为protected类型")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_STATIC")]),t._v(" "),v("td",[t._v("0x0008")]),t._v(" "),v("td",[t._v("是否为static类型")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_FINAL")]),t._v(" "),v("td",[t._v("0x0010")]),t._v(" "),v("td",[t._v("是否为final类型")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_VOLATILE")]),t._v(" "),v("td",[t._v("0x0040")]),t._v(" "),v("td",[t._v("是否volatile类型")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_TRANSIENT")]),t._v(" "),v("td",[t._v("0x0080")]),t._v(" "),v("td",[t._v("是否transient类型")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_SYNTHETIC")]),t._v(" "),v("td",[t._v("0x1000")]),t._v(" "),v("td",[t._v("是否由编译器自动产生")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_ENUM")]),t._v(" "),v("td",[t._v("0x4000")]),t._v(" "),v("td",[t._v("是否enum类型")])])])]),t._v(" "),v("p",[t._v("学过Java基础都有些常识，比如接口中的字段必然是public static final修饰的，同理接口字节码之中的字段必然有ACC_PUBLIC、ACC_STATIC、ACC_FINAL标识。")]),t._v(" "),v("h3",{attrs:{id:"简单名称name-index"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#简单名称name-index"}},[t._v("#")]),t._v(" 简单名称name_index")]),t._v(" "),v("p",[t._v('假如一个类的类全名为：com.hukai.demo.FieldDemo。则它的全限定名为：com/hukai/demo/FieldDemo;。.仅仅是把类全名中的"."替换成了"/"，同时在最后加入一个;而已。')]),t._v(" "),v("p",[t._v("简单名称指的是没有类型和修饰符的字段或者方法名称。这个类中的inc()方法和m字段的简单名称分別是“inc”和“m”。")]),t._v(" "),v("h3",{attrs:{id:"描述符descriptor-index"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#描述符descriptor-index"}},[t._v("#")]),t._v(" 描述符descriptor_index")]),t._v(" "),v("p",[t._v("相对于全限定名和简单名称来说.方法和字段的描述符就要复杂一些。描述符的作用是用来描述字段的数据类型、方法的参数列表（包括数量、类型以及顺序）和返回值。")]),t._v(" "),v("p",[t._v("根据描述符规则，基本数据类以及代表无返回值的void类型都用一个大写字符来表示，而对象类型则用字符L加对象的全限定名来表示，如下表：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("描述符")]),t._v(" "),v("th",[t._v("含义")]),t._v(" "),v("th",[t._v("描述符")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("B")]),t._v(" "),v("td",[t._v("基本类型byte")]),t._v(" "),v("td",[t._v("J")]),t._v(" "),v("td",[t._v("基本类型long")])]),t._v(" "),v("tr",[v("td",[t._v("C")]),t._v(" "),v("td",[t._v("基本类型char")]),t._v(" "),v("td",[t._v("S")]),t._v(" "),v("td",[t._v("基本类型short")])]),t._v(" "),v("tr",[v("td",[t._v("D")]),t._v(" "),v("td",[t._v("基本类型double")]),t._v(" "),v("td",[t._v("Z")]),t._v(" "),v("td",[t._v("基本类型boolean")])]),t._v(" "),v("tr",[v("td",[t._v("F")]),t._v(" "),v("td",[t._v("基本类型float")]),t._v(" "),v("td",[t._v("V")]),t._v(" "),v("td",[t._v("基本类型void")])]),t._v(" "),v("tr",[v("td",[t._v("I")]),t._v(" "),v("td",[t._v("基本类型int")]),t._v(" "),v("td",[t._v("L")]),t._v(" "),v("td",[t._v("对象类型，如Ljava/lang/Object")])])])]),t._v(" "),v("p",[t._v("对于数组类型，每一个维度都是用一个前置的“[”来描述，如java.lang.String[][]类型的二位数组将被记录为[[java/lang/String;")]),t._v(" "),v("p",[t._v("描述方法时，将按照先参数列表、后返回值的顺序来描述。其中参数列表严格按照参数的顺序放在一组小括号()之内。例如方法java.lang.String.toString()的描述符为()Ljava/lang/String;")]),t._v(" "),v("p",[t._v("在descriptor_index之后跟随着一个属性表集合用于存储一些额外的信息，字段都可以在属性表中描述零至多项的额外信息。具体内容后续讲解。")]),t._v(" "),v("p",[t._v("了解了这几个概念之后，我们来看一个实例：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171516.png",alt:""}})]),t._v(" "),v("ul",[v("li",[t._v("fields_count=0x0001表明这个类只有一个字段表数据；")]),t._v(" "),v("li",[t._v("access_flags=0x000A表明ACC_PRIVATE与ACC_STATIC标志位为1真，其它标志位为0；")]),t._v(" "),v("li",[t._v("name_index=0x000D表明字段简单名称为常量池中的第13个常量，也就是name；")]),t._v(" "),v("li",[t._v("descriptor=0x000E表明字段描述符为常量池中的第14个常量，也就是Ljava/lang/String;")]),t._v(" "),v("li",[t._v("attributes_count=0x0000表明字段额外属性个数为0；")])]),t._v(" "),v("p",[t._v("由此可以反过来得到该类的一个属性为 private static String name;")]),t._v(" "),v("h2",{attrs:{id:"方法表集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#方法表集合"}},[t._v("#")]),t._v(" 方法表集合")]),t._v(" "),v("p",[t._v("对方法描述的方式与对字段描述的方式基本一致，如下图：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171546.png",alt:""}})]),t._v(" "),v("p",[t._v("methods_count描述的是当前的类中定义的方法的个数， 注意， 这里包括静态方法， 但不包括从父类继承的方法，除非这个方法在子类被重写了。 如果当前class文件是由一个接口生成的，那么这里的methods_count描述的是接口中定义的抽象方法的数量。")]),t._v(" "),v("p",[t._v("方法表的结构也与字段表的结构完全一致，不同之处在于方法的访问标志与字段的访问标志有所区别。例如volatile与transient不能修饰方法，但是方法却有synchronized、native、strictfp和abstract等属性。其具体访问标志如下：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("标志名称")]),t._v(" "),v("th",[t._v("标志值")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("ACC_PUBLIC")]),t._v(" "),v("td",[t._v("0x0001")]),t._v(" "),v("td",[t._v("是否为public类型")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_PRIVATE")]),t._v(" "),v("td",[t._v("0x0002")]),t._v(" "),v("td",[t._v("是否为final类型")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_PROTECTED")]),t._v(" "),v("td",[t._v("0x0004")]),t._v(" "),v("td",[t._v("是否为protected类型")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_STATIC")]),t._v(" "),v("td",[t._v("0x0008")]),t._v(" "),v("td",[t._v("是否为static类型")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_FINAL")]),t._v(" "),v("td",[t._v("0x0010")]),t._v(" "),v("td",[t._v("是否为final类型")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_SYNCHRONIZED")]),t._v(" "),v("td",[t._v("0x0020")]),t._v(" "),v("td",[t._v("是否synchronized类型")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_BRIDGE")]),t._v(" "),v("td",[t._v("0x0040")]),t._v(" "),v("td",[t._v("是否桥接方法")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_VARARGS")]),t._v(" "),v("td",[t._v("0x0080")]),t._v(" "),v("td",[t._v("是否接收不定参数")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_NATIVE")]),t._v(" "),v("td",[t._v("0x0100")]),t._v(" "),v("td",[t._v("是否native方法")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_ABSTRACT")]),t._v(" "),v("td",[t._v("0x0400")]),t._v(" "),v("td",[t._v("是否abstract")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_STRICTFP")]),t._v(" "),v("td",[t._v("0x0800")]),t._v(" "),v("td",[t._v("是否strictfp")])]),t._v(" "),v("tr",[v("td",[t._v("ACC_SYNTHETIC")]),t._v(" "),v("td",[t._v("0x1000")]),t._v(" "),v("td",[t._v("是否由编译器自动产生")])])])]),t._v(" "),v("p",[t._v("下面我们来看一个实例，现在有这样一个类：")]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hukai"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("demo"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bytecode")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodDemo")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n\t"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tname "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Impluvious"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br"),v("span",{staticClass:"line-number"},[t._v("9")]),v("br"),v("span",{staticClass:"line-number"},[t._v("10")]),v("br"),v("span",{staticClass:"line-number"},[t._v("11")]),v("br"),v("span",{staticClass:"line-number"},[t._v("12")]),v("br"),v("span",{staticClass:"line-number"},[t._v("13")]),v("br"),v("span",{staticClass:"line-number"},[t._v("14")]),v("br")])]),v("p",[t._v("使用JBE工具打开class文件，可以查看到类中定义的方法：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://blog-1259322452.cos.ap-guangzhou.myqcloud.com/jvm/20200513171604.png",alt:""}})]),t._v(" "),v("p",[t._v("我们明明只定义了一个方法，为什么class文件中有三个方法呢？")]),t._v(" "),v("p",[t._v("因为编译器可能会在编译时向class文件增加额外的方法， 也就是说， class文件中的方法的数量可能多于源文件中由用户定义的方法。 举例来说：如果当前类没有定义构造方法，那么编译器会增加一个无参数的构造函数"),v("code",[t._v("init")]),t._v("；如果当前类或接口中定义了静态变量， 并且使用初始化表达式为其赋值，或者定义了static静态代码块， 那么编译器在编译的时候会默认增加一个静态初始化方法"),v("code",[t._v("clinit")]),t._v("。")]),t._v(" "),v("p",[t._v("使用javap解析class文件，得到的结果也是一致的。")]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('{\n  private static java.lang.String name;\n    descriptor: Ljava/lang/String;\n    flags: ACC_PRIVATE, ACC_STATIC\n\n  static {};\n    descriptor: ()V\n    flags: ACC_STATIC\n    Code:\n      stack=1, locals=0, args_size=0\n         0: ldc           #10                 // String Impluvious\n         2: putstatic     #12                 // Field name:Ljava/lang/String;\n         5: return\n      LineNumberTable:\n        line 8: 0\n        line 9: 5\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n\n  public com.hukai.demo.bytecode.MethodDemo();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #17                 // Method java/lang/Object."<init>":()V\n         4: return\n      LineNumberTable:\n        line 12: 0\n        line 13: 4\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lcom/hukai/demo/bytecode/MethodDemo;\n\n  public java.lang.String getName();\n    descriptor: ()Ljava/lang/String;\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: getstatic     #12                 // Field name:Ljava/lang/String;\n         3: areturn\n      LineNumberTable:\n        line 16: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       4     0  this   Lcom/hukai/demo/bytecode/MethodDemo;\n}\n')])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br"),v("span",{staticClass:"line-number"},[t._v("9")]),v("br"),v("span",{staticClass:"line-number"},[t._v("10")]),v("br"),v("span",{staticClass:"line-number"},[t._v("11")]),v("br"),v("span",{staticClass:"line-number"},[t._v("12")]),v("br"),v("span",{staticClass:"line-number"},[t._v("13")]),v("br"),v("span",{staticClass:"line-number"},[t._v("14")]),v("br"),v("span",{staticClass:"line-number"},[t._v("15")]),v("br"),v("span",{staticClass:"line-number"},[t._v("16")]),v("br"),v("span",{staticClass:"line-number"},[t._v("17")]),v("br"),v("span",{staticClass:"line-number"},[t._v("18")]),v("br"),v("span",{staticClass:"line-number"},[t._v("19")]),v("br"),v("span",{staticClass:"line-number"},[t._v("20")]),v("br"),v("span",{staticClass:"line-number"},[t._v("21")]),v("br"),v("span",{staticClass:"line-number"},[t._v("22")]),v("br"),v("span",{staticClass:"line-number"},[t._v("23")]),v("br"),v("span",{staticClass:"line-number"},[t._v("24")]),v("br"),v("span",{staticClass:"line-number"},[t._v("25")]),v("br"),v("span",{staticClass:"line-number"},[t._v("26")]),v("br"),v("span",{staticClass:"line-number"},[t._v("27")]),v("br"),v("span",{staticClass:"line-number"},[t._v("28")]),v("br"),v("span",{staticClass:"line-number"},[t._v("29")]),v("br"),v("span",{staticClass:"line-number"},[t._v("30")]),v("br"),v("span",{staticClass:"line-number"},[t._v("31")]),v("br"),v("span",{staticClass:"line-number"},[t._v("32")]),v("br"),v("span",{staticClass:"line-number"},[t._v("33")]),v("br"),v("span",{staticClass:"line-number"},[t._v("34")]),v("br"),v("span",{staticClass:"line-number"},[t._v("35")]),v("br"),v("span",{staticClass:"line-number"},[t._v("36")]),v("br"),v("span",{staticClass:"line-number"},[t._v("37")]),v("br"),v("span",{staticClass:"line-number"},[t._v("38")]),v("br"),v("span",{staticClass:"line-number"},[t._v("39")]),v("br"),v("span",{staticClass:"line-number"},[t._v("40")]),v("br"),v("span",{staticClass:"line-number"},[t._v("41")]),v("br"),v("span",{staticClass:"line-number"},[t._v("42")]),v("br"),v("span",{staticClass:"line-number"},[t._v("43")]),v("br"),v("span",{staticClass:"line-number"},[t._v("44")]),v("br"),v("span",{staticClass:"line-number"},[t._v("45")]),v("br"),v("span",{staticClass:"line-number"},[t._v("46")]),v("br"),v("span",{staticClass:"line-number"},[t._v("47")]),v("br")])])])}),[],!1,null,null,null);_.default=s.exports}}]);