(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{523:function(t,a,_){"use strict";_.r(a);var r=_(14),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"算法的定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算法的定义"}},[t._v("#")]),t._v(" 算法的定义")]),t._v(" "),_("blockquote",[_("p",[t._v("算法是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制。")])]),t._v(" "),_("p",[t._v("算法的定义中，提到了指令，指令能被人或机器等计算装置执行。他可以是计算机指令，也可以是我们平时的语言文字。\n为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能，这就是算法了。")]),t._v(" "),_("h2",{attrs:{id:"算法的特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算法的特性"}},[t._v("#")]),t._v(" 算法的特性")]),t._v(" "),_("p",[t._v("算法具有5个基本特性：输入、输出、有穷性、确定性、可行性。")]),t._v(" "),_("h4",{attrs:{id:"_1-输入输出"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-输入输出"}},[t._v("#")]),t._v(" 1. 输入输出")]),t._v(" "),_("blockquote",[_("p",[t._v("算法具有零个或多个输入，至少有一个或多个输入。")])]),t._v(" "),_("p",[t._v("输入和输出特性比较容易理解。大部分算法都是需要输入的，但有些，比如打印'HelloWorld'，就不需要输入了。输出肯定要有，不需要输出，你要这个算法干嘛？")]),t._v(" "),_("h4",{attrs:{id:"_2-有穷性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-有穷性"}},[t._v("#")]),t._v(" 2. 有穷性")]),t._v(" "),_("blockquote",[_("p",[_("strong",[t._v("有穷性")]),t._v("：指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。")])]),t._v(" "),_("h4",{attrs:{id:"_3-确定性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-确定性"}},[t._v("#")]),t._v(" 3. 确定性")]),t._v(" "),_("blockquote",[_("p",[_("strong",[t._v("确定性")]),t._v("：算法的每一步骤都具有确定的含义，不会出现二义性。")])]),t._v(" "),_("p",[t._v("在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。")]),t._v(" "),_("h4",{attrs:{id:"_4-可行性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-可行性"}},[t._v("#")]),t._v(" 4. 可行性")]),t._v(" "),_("blockquote",[_("p",[_("strong",[t._v("可行性")]),t._v("：算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成。")])]),t._v(" "),_("h2",{attrs:{id:"算法的设计要求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算法的设计要求"}},[t._v("#")]),t._v(" 算法的设计要求")]),t._v(" "),_("h4",{attrs:{id:"_1-正确性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-正确性"}},[t._v("#")]),t._v(" 1. 正确性")]),t._v(" "),_("blockquote",[_("p",[_("strong",[t._v("正确性")]),t._v("：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。")])]),t._v(" "),_("h4",{attrs:{id:"_2-可读性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-可读性"}},[t._v("#")]),t._v(" 2. 可读性")]),t._v(" "),_("blockquote",[_("p",[_("strong",[t._v("可读性")]),t._v("：算法设计的另一目的是为了便于阅读、理解和交流。")])]),t._v(" "),_("p",[t._v("可读性高有助于人们理解算法，晦涩难懂的算法往往隐含错误，不易被发现，并且难以调试和修改。")]),t._v(" "),_("h4",{attrs:{id:"_3-健壮性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-健壮性"}},[t._v("#")]),t._v(" 3. 健壮性")]),t._v(" "),_("blockquote",[_("p",[_("strong",[t._v("健壮性")]),t._v("：当输入数据不合法时，算法也能做出相关处理，而不是产生异常和莫名其妙的结果。")])]),t._v(" "),_("h4",{attrs:{id:"_4-时间效率高和存储量低"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-时间效率高和存储量低"}},[t._v("#")]),t._v(" 4. 时间效率高和存储量低")]),t._v(" "),_("blockquote",[_("p",[t._v("设计算法应该尽量满足时间效率高和存储量低的需求。")])]),t._v(" "),_("p",[t._v("用最少的存储空间，花最少的时间，办成同样的事就是好算法。")]),t._v(" "),_("h2",{attrs:{id:"数据结构和算法的关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据结构和算法的关系"}},[t._v("#")]),t._v(" 数据结构和算法的关系")]),t._v(" "),_("p",[_("strong",[t._v("程序 = 数据结构 + 算法")])]),t._v(" "),_("p",[t._v("数据结构是算法的基础, 换言之，想要学好算法，需要把数据结构学到位。")])])}),[],!1,null,null,null);a.default=s.exports}}]);